// <auto-generated />
using System;
using Assignment_S02_EFCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment_S02_EFCore.Migrations.Airline_EFCore_Db
{
    [DbContext(typeof(Airline_EFCore_DbContext))]
    [Migration("20250921151536_CreateAirlineDatabaseWithRelations")]
    partial class CreateAirlineDatabaseWithRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.AirCraft", b =>
                {
                    b.Property<int>("AirCraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirCraftId"));

                    b.Property<int>("AirLineOwningId")
                        .HasColumnType("int");

                    b.Property<string>("Assisstant")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Host1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Host2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MajPilot")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AirCraftId");

                    b.HasIndex("AirLineOwningId");

                    b.ToTable("AirCrafts", "Airline");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.AirLine", b =>
                {
                    b.Property<int>("AirLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirLineId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContPerson")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AirLineId");

                    b.ToTable("AirLines", "Airline");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.AircraftRoutes", b =>
                {
                    b.Property<int>("AircraftId")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<string>("Depature")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Arrival")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfPassengers")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AircraftId", "RouteId", "Depature");

                    b.HasIndex("RouteId");

                    b.ToTable("AircraftRoutes");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.AirlinePhones", b =>
                {
                    b.Property<int>("AirLineId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AirLineId", "PhoneNumber");

                    b.ToTable("AirlinePhones");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmployeeWorkingId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("hiredate")
                        .HasColumnType("date");

                    b.HasKey("EmployeeId");

                    b.HasIndex("EmployeeWorkingId");

                    b.ToTable("Employees", "Airline");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.EmployeeQualifications", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("QualificationName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeId", "QualificationName");

                    b.ToTable("EmployeeQualifications");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteId"));

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RouteId");

                    b.ToTable("Routes", "Airline");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionsRecordedID")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("TransactionsRecordedID");

                    b.ToTable("Transactions", "Airline");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Consultants");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.Drugs", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.Nurse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NerseServedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NerseServedId");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.NurseDrugPatient", b =>
                {
                    b.Property<int>("NurseID")
                        .HasColumnType("int");

                    b.Property<string>("DrugCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("NurseID", "DrugCode", "PatientId");

                    b.HasIndex("DrugCode");

                    b.HasIndex("PatientId");

                    b.ToTable("NurseDrugPatient");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedConsultantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HostWardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedConsultantId");

                    b.HasIndex("HostWardId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.PatientConsultant", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "ConsultantId");

                    b.HasIndex("ConsultantId");

                    b.ToTable("PatientConsultant");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorId")
                        .IsUnique();

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MusicianProductionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MusicianProductionId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Album_Song", b =>
                {
                    b.Property<string>("SongTitle")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.HasKey("SongTitle", "AlbumId");

                    b.HasIndex("AlbumId");

                    b.ToTable("Album_Song");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Mus_Instrument", b =>
                {
                    b.Property<int>("MusicianId")
                        .HasColumnType("int");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.HasKey("MusicianId", "InstrumentId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("Mus_Instrument");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Mus_Song", b =>
                {
                    b.Property<int>("MusicianId")
                        .HasColumnType("int");

                    b.Property<string>("SongTitle")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MusicianId", "SongTitle");

                    b.HasIndex("SongTitle");

                    b.ToTable("Mus_Song");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Musician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ph_Number")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Musicians");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Song", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Title");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedOfficeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedOfficeID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Prop_Owner", b =>
                {
                    b.Property<int>("OwnId")
                        .HasColumnType("int");

                    b.Property<int>("PropId")
                        .HasColumnType("int");

                    b.Property<decimal>("percent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OwnId", "PropId");

                    b.HasIndex("PropId");

                    b.ToTable("Prop_Owner");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListedOfficeID")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ListedOfficeID");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.SalesOffice", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.HasKey("Number");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.ToTable("SalesOffices");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.AirCraft", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Airline.AirLine", "AirLineOwning")
                        .WithMany("OwnedCraft")
                        .HasForeignKey("AirLineOwningId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AirLineOwning");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.AircraftRoutes", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Airline.AirCraft", "AirCraft")
                        .WithMany("AssignedRoutes")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_S02_EFCore.Models.Airline.Route", "Route")
                        .WithMany("RoutesAssigned")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirCraft");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.Employee", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Airline.AirLine", "EmployeeWorking")
                        .WithMany("WorkingEmployee")
                        .HasForeignKey("EmployeeWorkingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeeWorking");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.Transaction", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Airline.AirLine", "TransactionsRecorded")
                        .WithMany("RecordedTransactions")
                        .HasForeignKey("TransactionsRecordedID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TransactionsRecorded");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.Nurse", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Hospital.Ward", "NerseServed")
                        .WithMany("ServedNerse")
                        .HasForeignKey("NerseServedId");

                    b.Navigation("NerseServed");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.NurseDrugPatient", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Hospital.Drugs", "Drugs")
                        .WithMany("DrugGived")
                        .HasForeignKey("DrugCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_S02_EFCore.Models.Hospital.Nurse", "Nurse")
                        .WithMany("NurseDrugGived")
                        .HasForeignKey("NurseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_S02_EFCore.Models.Hospital.Patient", "Patient")
                        .WithMany("PatientDrugGived")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drugs");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.Patient", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Hospital.Consultant", "AssignedConsultant")
                        .WithMany("AssignedPatients")
                        .HasForeignKey("AssignedConsultantId");

                    b.HasOne("Assignment_S02_EFCore.Models.Hospital.Ward", "HostWard")
                        .WithMany("HostPatients")
                        .HasForeignKey("HostWardId");

                    b.Navigation("AssignedConsultant");

                    b.Navigation("HostWard");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.PatientConsultant", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Hospital.Consultant", "Consultant")
                        .WithMany("ExaminePatients")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_S02_EFCore.Models.Hospital.Patient", "Patient")
                        .WithMany("PatientsExamine")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.Ward", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Hospital.Nurse", "Supervisor")
                        .WithOne("SupervisedWard")
                        .HasForeignKey("Assignment_S02_EFCore.Models.Hospital.Ward", "SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Album", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Musician.Musician", "MusicianProduction")
                        .WithMany("AlbumsProduction")
                        .HasForeignKey("MusicianProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MusicianProduction");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Album_Song", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Musician.Album", "Album")
                        .WithMany("ContainSongs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_S02_EFCore.Models.Musician.Song", "Song")
                        .WithMany("SongsInAlbum")
                        .HasForeignKey("SongTitle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Mus_Instrument", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Musician.Instrument", "Instrument")
                        .WithMany("InstrumentPlayed")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_S02_EFCore.Models.Musician.Musician", "Musician")
                        .WithMany("PlayedInstrument")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Mus_Song", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Musician.Musician", "Musician")
                        .WithMany("PerformedSongs")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_S02_EFCore.Models.Musician.Song", "Song")
                        .WithMany("SongsPerformed")
                        .HasForeignKey("SongTitle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musician");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Employee", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Sales.SalesOffice", "AssignedOffice")
                        .WithMany("AssignedEmployee")
                        .HasForeignKey("AssignedOfficeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AssignedOffice");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Prop_Owner", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Sales.Owner", "Owner")
                        .WithMany("OwnedProperties")
                        .HasForeignKey("OwnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_S02_EFCore.Models.Sales.Property", "Property")
                        .WithMany("PropertiesOwned")
                        .HasForeignKey("PropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Property", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Sales.SalesOffice", "ListedOffice")
                        .WithMany("ListsOfProperties")
                        .HasForeignKey("ListedOfficeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListedOffice");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.SalesOffice", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Sales.Employee", "Manger")
                        .WithOne("ManagedOffice")
                        .HasForeignKey("Assignment_S02_EFCore.Models.Sales.SalesOffice", "ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manger");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.AirCraft", b =>
                {
                    b.Navigation("AssignedRoutes");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.AirLine", b =>
                {
                    b.Navigation("OwnedCraft");

                    b.Navigation("RecordedTransactions");

                    b.Navigation("WorkingEmployee");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Airline.Route", b =>
                {
                    b.Navigation("RoutesAssigned");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.Consultant", b =>
                {
                    b.Navigation("AssignedPatients");

                    b.Navigation("ExaminePatients");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.Drugs", b =>
                {
                    b.Navigation("DrugGived");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.Nurse", b =>
                {
                    b.Navigation("NurseDrugGived");

                    b.Navigation("SupervisedWard");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.Patient", b =>
                {
                    b.Navigation("PatientDrugGived");

                    b.Navigation("PatientsExamine");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Hospital.Ward", b =>
                {
                    b.Navigation("HostPatients");

                    b.Navigation("ServedNerse");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Album", b =>
                {
                    b.Navigation("ContainSongs");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Instrument", b =>
                {
                    b.Navigation("InstrumentPlayed");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Musician", b =>
                {
                    b.Navigation("AlbumsProduction");

                    b.Navigation("PerformedSongs");

                    b.Navigation("PlayedInstrument");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Musician.Song", b =>
                {
                    b.Navigation("SongsInAlbum");

                    b.Navigation("SongsPerformed");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Employee", b =>
                {
                    b.Navigation("ManagedOffice");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Owner", b =>
                {
                    b.Navigation("OwnedProperties");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Property", b =>
                {
                    b.Navigation("PropertiesOwned");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.SalesOffice", b =>
                {
                    b.Navigation("AssignedEmployee");

                    b.Navigation("ListsOfProperties");
                });
#pragma warning restore 612, 618
        }
    }
}
