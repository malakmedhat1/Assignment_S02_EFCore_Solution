// <auto-generated />
using System;
using Assignment_S02_EFCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment_S02_EFCore.Migrations
{
    [DbContext(typeof(ITI_EFCore_DbContext))]
    [Migration("20250921094947_CreateITIDatabaseWithRelations")]
    partial class CreateITIDatabaseWithRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassifiedTopicID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("Top_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassifiedTopicID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Course_Inst", b =>
                {
                    b.Property<int>("InstId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<decimal>("Evaluate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InstId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Course_Inst");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasFilter("[ManagerId] IS NOT NULL");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ContainedDepartmentID")
                        .HasColumnType("int");

                    b.Property<float>("HourRate")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("InstructorSalary");

                    b.HasKey("Id");

                    b.HasIndex("ContainedDepartmentID");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Stud_Course", b =>
                {
                    b.Property<int>("StudId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StudId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Stud_Course");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Student", b =>
                {
                    b.Property<int>("StudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("StudentAge");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocatedDepartmentID")
                        .HasColumnType("int");

                    b.HasKey("StudId");

                    b.HasIndex("LocatedDepartmentID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Course", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.ITI.Topic", "ClassifiedTopic")
                        .WithMany("ClassifiedCourses")
                        .HasForeignKey("ClassifiedTopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassifiedTopic");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Course_Inst", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.ITI.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_S02_EFCore.Models.ITI.Instructor", "Instructor")
                        .WithMany("InstructedCourses")
                        .HasForeignKey("InstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Department", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.ITI.Instructor", "Manager")
                        .WithOne("ManagedDepartment")
                        .HasForeignKey("Assignment_S02_EFCore.Models.ITI.Department", "ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Instructor", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.ITI.Department", "ContainedDepartment")
                        .WithMany("ContainedInstructors")
                        .HasForeignKey("ContainedDepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainedDepartment");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Stud_Course", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.ITI.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_S02_EFCore.Models.ITI.Student", "Student")
                        .WithMany("StudentsCourses")
                        .HasForeignKey("StudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Student", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.ITI.Department", "LocatedDepartment")
                        .WithMany("LocatedStudents")
                        .HasForeignKey("LocatedDepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocatedDepartment");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Course", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("CourseStudents");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Department", b =>
                {
                    b.Navigation("ContainedInstructors");

                    b.Navigation("LocatedStudents");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Instructor", b =>
                {
                    b.Navigation("InstructedCourses");

                    b.Navigation("ManagedDepartment");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Student", b =>
                {
                    b.Navigation("StudentsCourses");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.ITI.Topic", b =>
                {
                    b.Navigation("ClassifiedCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
