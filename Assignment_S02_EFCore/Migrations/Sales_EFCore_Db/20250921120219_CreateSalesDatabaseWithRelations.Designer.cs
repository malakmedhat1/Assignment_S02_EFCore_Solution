// <auto-generated />
using Assignment_S02_EFCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment_S02_EFCore.Migrations.Sales_EFCore_Db
{
    [DbContext(typeof(Sales_EFCore_DbContext))]
    [Migration("20250921120219_CreateSalesDatabaseWithRelations")]
    partial class CreateSalesDatabaseWithRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedOfficeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedOfficeID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Prop_Owner", b =>
                {
                    b.Property<int>("OwnId")
                        .HasColumnType("int");

                    b.Property<int>("PropId")
                        .HasColumnType("int");

                    b.Property<decimal>("percent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OwnId", "PropId");

                    b.HasIndex("PropId");

                    b.ToTable("Prop_Owners");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListedOfficeID")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ListedOfficeID");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.SalesOffice", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.HasKey("Number");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.ToTable("SalesOffices");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Employee", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Sales.SalesOffice", "AssignedOffice")
                        .WithMany("AssignedEmployee")
                        .HasForeignKey("AssignedOfficeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AssignedOffice");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Prop_Owner", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Sales.Owner", "Owner")
                        .WithMany("OwnedProperties")
                        .HasForeignKey("OwnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_S02_EFCore.Models.Sales.Property", "Property")
                        .WithMany("PropertiesOwned")
                        .HasForeignKey("PropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Property", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Sales.SalesOffice", "ListedOffice")
                        .WithMany("ListsOfProperties")
                        .HasForeignKey("ListedOfficeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListedOffice");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.SalesOffice", b =>
                {
                    b.HasOne("Assignment_S02_EFCore.Models.Sales.Employee", "Manger")
                        .WithOne("ManagedOffice")
                        .HasForeignKey("Assignment_S02_EFCore.Models.Sales.SalesOffice", "ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manger");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Employee", b =>
                {
                    b.Navigation("ManagedOffice");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Owner", b =>
                {
                    b.Navigation("OwnedProperties");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.Property", b =>
                {
                    b.Navigation("PropertiesOwned");
                });

            modelBuilder.Entity("Assignment_S02_EFCore.Models.Sales.SalesOffice", b =>
                {
                    b.Navigation("AssignedEmployee");

                    b.Navigation("ListsOfProperties");
                });
#pragma warning restore 612, 618
        }
    }
}
